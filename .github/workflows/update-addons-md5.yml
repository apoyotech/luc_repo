name: Build addons.xml & MD5 (multi-folders)

on:
  push:
    paths:
      - 'zips/**'
      - 'addons/**'
      - 'repo/**'
      - 'plugins/**'
      - '**/addon.xml'
      - '.github/workflows/build-addons-xml.yml'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: build-addons-xml
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configura aquí las carpetas "preferidas" donde sueles tener los add-ons
      - name: Define scan roots
        id: roots
        run: |
          echo 'ROOTS=zips addons repo plugins' >> $GITHUB_OUTPUT

      # Buscar todos los addon.xml bajo las carpetas ROOTS y, además, en todo el repo
      # (excluyendo .git y .github). Se ordenan para resultado reproducible.
      - name: Find addon.xml files
        id: find_addons
        run: |
          set -euo pipefail
          TMP_LIST="${RUNNER_TEMP}/addonxml-list.txt"
          : > "$TMP_LIST"

          # 1) Buscar en las carpetas preferidas (si existen)
          for d in ${{ steps.roots.outputs.ROOTS }}; do
            if [ -d "$d" ]; then
              find "$d" -type f -name addon.xml >> "$TMP_LIST" || true
            fi
          done

          # 2) Búsqueda global en el repo (excluyendo .git y .github para evitar ruido)
          find . -type f -name addon.xml \
            -not -path "./.git/*" \
            -not -path "./.github/*" >> "$TMP_LIST" || true

          # Quitar duplicados y ordenar
          sort -u "$TMP_LIST" -o "$TMP_LIST"

          echo "TMP_LIST=$TMP_LIST" >> $GITHUB_OUTPUT
          echo "Encontrados $(wc -l < "$TMP_LIST") addon.xml:"
          cat "$TMP_LIST" || true

      - name: Generate addons.xml
        env:
          TMP_LIST: ${{ steps.find_addons.outputs.TMP_LIST }}
        run: |
          set -euo pipefail
          if [ ! -s "$TMP_LIST" ]; then
            echo "No se encontraron addon.xml en el repositorio."
            printf '%s\n' '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' > addons.xml
            printf '%s\n' '<addons/>' >> addons.xml
            exit 0
          fi

          python3 - << 'PY'
import os, re, sys

tmp_list = os.environ["TMP_LIST"]
with open(tmp_list, "r", encoding="utf-8") as fh:
    files = [line.strip() for line in fh if line.strip()]

xml_decl_re = re.compile(r'^<\?xml[^>]*\?>\s*', re.IGNORECASE)
addons = []

for path in files:
    try:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read().strip()
            content = xml_decl_re.sub('', content).strip()
            if content:
                addons.append(content)
    except Exception as e:
        print(f"[WARN] No se pudo leer {path}: {e}", file=sys.stderr)

header = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n'
body_open = '<addons>\n'
body_close = '\n</addons>\n'
joined = '\n\n'.join(addons)

with open("addons.xml", "w", encoding="utf-8", newline="\n") as out:
    out.write(header + body_open + joined + body_close)
PY

      - name: Generate addons.xml.md5 (Kodi format)
        run: |
          set -euo pipefail
          test -f addons.xml || { echo "addons.xml no existe"; exit 1; }
          HASH="$(md5sum addons.xml | awk '{print $1}')"
          echo "${HASH}  addons.xml" > addons.xml.md5
          echo "MD5: ${HASH}"

      - name: Commit & push if changed
        run: |
          set -euo pipefail
          if git diff --quiet -- addons.xml addons.xml.md5; then
            echo "Sin cambios en addons.xml / addons.xml.md5"
          else
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add addons.xml addons.xml.md5
            git commit -m "build: regenerate addons.xml & addons.xml.md5 (multi-folders)"
            git push
          fi
          
          
